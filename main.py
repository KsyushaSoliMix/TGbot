# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏
import re
from pathlib import Path
import telebot
import os
import sqlite3
from telebot import types
import googletrans
from googletrans import Translator
import sqllite_db
import random

# –¢–æ–∫–µ–Ω –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞

token = '5305392177:AAGRLxjBJ43TgZSo7qC8XoXRJ75bKCzh7Fk'
bot = telebot.TeleBot(token)

# ----------------------------------------------------------

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–∞–Ω–¥

translator = Translator()

languages = ["üá¨üáß English", "üá©üá™ Deutsch", "üá∑üá∫ –†—É—Å—Å–∫–∏–π"]

help_line = "/new_language - –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —è–∑—ã–∫.\n" \
            "/my_languages - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–∂–µ –∏–∑—É—á–∞–µ–º—ã–µ –≤–∞–º–∏ —è–∑—ã–∫–∏\n" \
            "/study *—è–∑—ã–∫* - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–∑—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞.\n"

create_users = """
INSERT INTO users 
   (user_id, languages,vocabulary_eng, vocabulary_deu)
VALUES (?, ?, ?, ?);"""

# ----------------------------------------------------------



# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–æ–≤:
def get_languages(user_id):

    info = sqllite_db.cursor.execute('SELECT * FROM users WHERE user_id=?', (user_id,))
    record = info.fetchone()
    return record[1]


def set_language(user_id, language):

    help_language = get_languages(user_id) + language + "&"
    sqllite_db.cursor.execute('UPDATE users SET languages = ? WHERE user_id = ?', (help_language, user_id))
    sqllite_db.connection.commit()


#—Å—é–¥–∞ –∑–∞–∫–∏–¥—ã–≤–∞–µ—Ç—Å—è —Å–ª–æ–≤–æ –∏–∑ vocab_eng
def after_text_2(message):

    mes = message.text
    info = sqllite_db.cursor.execute('SELECT * FROM users WHERE user_id=?', (message.from_user.id,))
    record = info.fetchone()
    if record[2] != None:
        vocabulary = record[2]
    else:
        vocabulary = ""
    help_string = str(vocabulary) + str(mes) + ","
    sqllite_db.cursor.execute('UPDATE users SET vocabulary_eng = ? WHERE user_id = ?',
                                  (help_string, message.from_user.id))
    sqllite_db.connection.commit()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–î–∞")
    markup.add(item1)
    item1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item1)
    bot.send_message(message.chat.id,"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–æ–±–∞–≤–ª—è—Ç—å —Å–ª–æ–≤–∞?",reply_markup=markup)

# ----------------------------------------------------------


@bot.message_handler(commands=['start'])
def start_message(message):
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —é–∑–µ—Ä–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ —Ç–æ, –±—ã–ª –ª–∏ –æ–Ω –¥–æ —ç—Ç–æ–≥–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    info = sqllite_db.cursor.execute('SELECT * FROM users WHERE user_id=?', (message.from_user.id,))

    info.fetchone()
    if info.fetchone() is None:
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, " + message.from_user.first_name + "!\n" \
                                                                                     "Study language bot –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤ –∏–∑—É—á–µ–Ω–∏–∏ —Ä–∞–∑–Ω—ã—Ö –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤.\n" \
                                                                                     "–í–≤–µ–¥–∏ /help –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª.")

        person_data = (message.from_user.id, "", None,None)
        sqllite_db.cursor.execute(create_users, person_data)
        sqllite_db.connection.commit()

    else:
        bot.send_message(message.chat.id,
                         "–ü—Ä–∏–≤–µ—Ç, " + message.from_user.first_name + "! –ì–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ?\n–í–≤–æ–¥–∏ –∫–æ–º–∞–Ω–¥—É /study –∏ –ø–æ–µ—Ö–∞–ª–∏!!!")


@bot.message_handler(commands=['help'])
def help_message(message):

    bot.send_message(message.chat.id, help_line)

# –í—ã–±–æ—Ä —è–∑—ã–∫–æ–≤:
@bot.message_handler(commands=['new_language'])
def new_language_message(message):

    users_languages = get_languages(message.from_user.id)
    split_user_languages = re.split("&", users_languages)
    other_languages = languages
    #if the language is chosen, we don't create a button for it
    for i in range(0, len(split_user_languages)):
        if other_languages.__contains__(split_user_languages[i]):
            other_languages.remove(split_user_languages[i])
    #start creating buttons
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for i in range(0, len(other_languages)):
        #the actual creation of the button
        item = types.KeyboardButton(other_languages[i])
        markup.add(item)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫", reply_markup=markup)


@bot.message_handler(commands=['my_languages'])
def get_my_languages_message(message):

    users_languages = get_languages(message.from_user.id)
    split_user_languages = re.split("&", users_languages)
    help_string = ""
    for i in range(0, len(split_user_languages)):
        help_string += split_user_languages[i] + "\n"

    if help_string == "\n":
        bot.send_message(message.chat.id, "–í—ã –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞ :(")
    else:
        bot.send_message(message.chat.id, help_string)




@bot.message_handler(commands=['vocab_eng'])
def add_to_eng_vocabulary(message):

        keyboard1 = types.InlineKeyboardMarkup()
        keyboard1.add(types.InlineKeyboardButton(text="–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ, –≤–∏—Ç–µ –Ω–∞–¥–æ –≤—ã–π—Ç–∏", callback_data="stop"))
        msg = bot.send_message(message.from_user.id, "–ó–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—å –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: *—Å–ª–æ–≤–æ* ", reply_markup = keyboard1)
        bot.register_next_step_handler(msg, after_text_2)




@bot.message_handler(commands=['get_eng_vocab'])
def new_language_message(message):
    info = sqllite_db.cursor.execute('SELECT * FROM users WHERE user_id=?', (message.from_user.id,))
    record = info.fetchall()
    for row in record:
        vocab_as_a_string = row[2]
    vocab = vocab_as_a_string.split(",")
    file = Path('C:\\Users\\Natasha\\PycharmProjects\\TGbot_orig\\{}_eng.txt'.format(message.chat.id)).touch()
    print(vocab)
    with open(Path('C:\\Users\\Natasha\\PycharmProjects\\TGbot_orig\\{}_eng.txt'.format(message.chat.id)),"w") as f:
        for i in range(len(vocab)):
            result = translator.translate(vocab[i])
            if vocab[i]=="":
                continue
            else:
                f.write(vocab[i] + " - " + result.text + "\n")
    file_to_send = open(Path('C:\\Users\\Natasha\\PycharmProjects\\TGbot_orig\\{}_eng.txt'.format(message.chat.id)), "r")
    bot.send_document(message.chat.id, file_to_send)
    file_to_send.close()
    Path('C:\\Users\\Natasha\\PycharmProjects\\TGbot_orig\\{}_eng.txt'.format(message.chat.id)).unlink()


@bot.message_handler(commands=['quiz_eng'])
def new_language_message(message):
    info = sqllite_db.cursor.execute('SELECT * FROM users WHERE user_id=?', (message.from_user.id,))
    record = info.fetchall()
    for row in record:
        vocab_as_a_string = row[2]
    vocab = vocab_as_a_string.split(",")[:-1]
    if len(vocab)<4:
        bot.send_message(message.chat.id, "–í—ã –µ—â–µ –Ω–µ –Ω–∞–±—Ä–∞–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è –∫–≤–∏–∑–∞ :(")
    else:
        words = random.sample(vocab, k=4)
        i = random.randint(0,4)
        correct_word = translator.translate(words[i],  src='en', dest='ru')
        #—ç—Ç–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        correct_word_in_russian = correct_word.text
        #—ç—Ç–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–æ–≥–æ –∫–≤–∏–∑–∞, —Ç–æ –µ—Å—Ç—å –ø–æ –∫–∞–∫–æ–º—É —Å–ª–æ–≤—É –º—ã –¥–µ–ª–∞–µ–º –∫–≤–∏–∑
        correct_word_in_english = words[i]
        #—ç—Ç–æ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–µ—Ä–µ–≤–æ–¥–∏–º —Å–ª–æ–≤–∞
        translated_words = []
        for m in range(len(words)):
            result1 = translator.translate(words[m], src='en', dest='ru')
            translated_words.append(result1.text)
        print(translated_words)
        print(correct_word_in_russian)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for j in range(len(words)):
            # the actual creation of the button
            item = types.KeyboardButton(translated_words[j])
            markup.add(item)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ "+correct_word_in_english, reply_markup=markup)
        @bot.message_handler(content_types=['text'])
        if message.text == correct_word_in_russian:
            print("–ü—Ä–∞–≤–∏–ª—å–Ω–æ!")


@bot.message_handler(content_types=['text'])
def languages_handling(message):
    a = telebot.types.ReplyKeyboardRemove()
    if message.text == "–î–∞":
        keyboard1 = types.InlineKeyboardMarkup()
        keyboard1.add(types.InlineKeyboardButton(text="–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ, –≤–∏—Ç–µ –Ω–∞–¥–æ –≤—ã–π—Ç–∏", callback_data="stop"))
        # markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        # markup.add(types.KeyboardButton("stop"))
        msg = bot.send_message(message.from_user.id,
                               "–ó–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—å –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: *—Å–ª–æ–≤–æ* ",
                               reply_markup=keyboard1)
        bot.register_next_step_handler(msg, after_text_2)
    # if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
    #     #—Å—é–¥–∞ –±–∞—Ö–Ω—É—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å—Ç–∞–¥–∏
    if message.text == "üá¨üáß English":
        str = "üá¨üáß English"
        bot.send_message(message.chat.id, 'Now you are a englishman \n –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ, –∂–º–∏ /study', reply_markup=a)
        set_language(message.from_user.id, str)
        sqllite_db.connection.commit()


    elif message.text == "üá©üá™ Deutsch":
        str = "üá©üá™ Deutsch"
        bot.send_message(message.chat.id, 'Jetzt du bist Deutsch Person \n –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ, –∂–º–∏ /study', reply_markup=a)
        set_language(message.from_user.id, str)
        sqllite_db.connection.commit()
    elif message.text == "üá∑üá∫ –†—É—Å—Å–∫–∏–π":
        bot.send_message(message.chat.id, '–£–π–¥–∏ –æ—Ç—Å—é–¥–∞, –ø–∏–¥–æ—Ä –≥—Ä—è–∑–Ω—ã–π')

@bot.callback_query_handler(func=lambda call: call.data == 'stop')
def send_study(call):
    bot.send_message(call.message.chat.id,'–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ, –∂–º–∏ /study')

# ----------------------------------------------------------
bot.polling(none_stop=True)
